<source>
  @type tail
  path /datasets/result.csv
  tag csv.result
  read_from_head true
  <parse>
    @type csv
    keys content_id,answer_id,text
    @log_level debug
  </parse>
</source>

<filter csv.result>
  @type grep
  <exclude>
    key content_id
    pattern content_id
  </exclude>
</filter>

<filter csv.result>
  @type record_transformer
  <record>
    _id ${record["content_id"]}_${record["answer_id"]}
    content_id ${record["content_id"]}
    answer_id ${record["answer_id"]}
    text ${record["text"]}
  </record>
</filter>

<match csv.result>
  @type couch
  database paperllm_results
  host couchdb
  port 5984
  user admin
  password yourpassword
  <buffer>
    flush_interval 5s
  </buffer>
</match>

<source>
  @type tail
  path /datasets/query.csv
  tag csv.query
  read_from_head true
  <parse>
    @type csv
    keys id,text
    @log_level debug
  </parse>
</source>

<filter csv.query>
  @type grep
  <exclude>
    key id
    pattern id
  </exclude>
</filter>

<filter csv.query>
  @type record_transformer
  <record>
    _id ${record["id"]}
    id ${record["id"]}
    text ${record["text"]}
  </record>
</filter>

<match csv.query>
  @type couch
  database paperllm_query
  host couchdb
  port 5984
  user admin
  password yourpassword
  <buffer>
    flush_interval 5s
  </buffer>
</match>

<source>
  @type tail
  path /datasets/content.csv
  tag csv.content
  read_from_head true
  <parse>
    @type csv
    keys uuid,title,abstract
    @log_level debug
  </parse>
</source>

<filter csv.content>
  @type grep
  <exclude>
    key uuid
    pattern uuid
  </exclude>
</filter>

<filter csv.content>
  @type record_transformer
  <record>
    _id ${record["uuid"]}
    uuid ${record["uuid"]}
    title ${record["title"]}
    abstract ${record["abstract"]}
  </record>
</filter>

<match csv.content>
  @type couch
  database paperllm_content
  host couchdb
  port 5984
  user admin
  password yourpassword
  <buffer>
    flush_interval 5s
  </buffer>
</match>