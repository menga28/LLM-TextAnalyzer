services:
  fluentd:
    build: ./fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentd/etc:/fluentd/etc
      - ./fluentd/log:/fluentd/log
      - ./datasets:/datasets
      - ./fluentd/scripts:/fluentd/scripts 
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    env_file: 
      - .env
    depends_on:
      couchdb:
        condition: service_healthy
    command: ["fluentd", "-c", "/fluentd/etc/test2.conf", "-vv"]
    networks:
      - backend
    restart: on-failure

  couchdb:
    build: ./couchdb
    ports:
      - "5984:5984"
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - couchdb-data:/opt/couchdb/data
    networks:
      - backend
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5984/_up"]
      interval: 10s
      retries: 5

  spark:
    build: ./spark
    ports:
      - "8080:8080"
    depends_on:
      - couchdb
    networks:
      - backend

  python-app:
    build:
      context: ./app  # Cambia il contesto di build alla cartella app
      dockerfile: Dockerfile  # Assicurati che il nome del Dockerfile sia corretto
    volumes:
      - ./app:/app  # Monta la cartella app nel container
      - ./datasets:/datasets
    networks:
      - backend
    restart: always

volumes:
  couchdb-data:
    driver: local

networks:
  backend:
    driver: bridge
